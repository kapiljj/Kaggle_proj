{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fb51ccbe",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-06T09:10:58.047096Z",
     "iopub.status.busy": "2025-04-06T09:10:58.046695Z",
     "iopub.status.idle": "2025-04-06T09:10:58.906404Z",
     "shell.execute_reply": "2025-04-06T09:10:58.905418Z"
    },
    "papermill": {
     "duration": 0.86626,
     "end_time": "2025-04-06T09:10:58.908345",
     "exception": false,
     "start_time": "2025-04-06T09:10:58.042085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "from matplotlib import pyplot as plt#showing image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3326f313",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-06T09:10:58.916120Z",
     "iopub.status.busy": "2025-04-06T09:10:58.915524Z",
     "iopub.status.idle": "2025-04-06T09:11:02.399974Z",
     "shell.execute_reply": "2025-04-06T09:11:02.398536Z"
    },
    "papermill": {
     "duration": 3.490239,
     "end_time": "2025-04-06T09:11:02.401950",
     "exception": false,
     "start_time": "2025-04-06T09:10:58.911711",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data= pd.read_csv(\"/kaggle/input/digit-recognizer/train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "daac3c54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-06T09:11:02.409573Z",
     "iopub.status.busy": "2025-04-06T09:11:02.409170Z",
     "iopub.status.idle": "2025-04-06T09:11:03.238774Z",
     "shell.execute_reply": "2025-04-06T09:11:03.237840Z"
    },
    "papermill": {
     "duration": 0.835914,
     "end_time": "2025-04-06T09:11:03.241111",
     "exception": false,
     "start_time": "2025-04-06T09:11:02.405197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = np.array(data)\n",
    "m, n = data.shape\n",
    "np.random.shuffle(data) # shuffle before splitting into dev and training sets\n",
    "\n",
    "data_dev = data[0:1000].T\n",
    "Y_dev = data_dev[0]\n",
    "X_dev = data_dev[1:n]\n",
    "X_dev = X_dev / 255.\n",
    "\n",
    "data_train = data[1000:m].T\n",
    "Y_train = data_train[0]\n",
    "X_train = data_train[1:n]\n",
    "X_train = X_train / 255.\n",
    "_,m_train = X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3d4c831e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-06T09:11:03.253749Z",
     "iopub.status.busy": "2025-04-06T09:11:03.253336Z",
     "iopub.status.idle": "2025-04-06T09:11:03.260218Z",
     "shell.execute_reply": "2025-04-06T09:11:03.259305Z"
    },
    "papermill": {
     "duration": 0.014681,
     "end_time": "2025-04-06T09:11:03.261691",
     "exception": false,
     "start_time": "2025-04-06T09:11:03.247010",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([8, 3, 5, ..., 6, 6, 3])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ee4d4eca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-06T09:11:03.269336Z",
     "iopub.status.busy": "2025-04-06T09:11:03.269029Z",
     "iopub.status.idle": "2025-04-06T09:11:03.275095Z",
     "shell.execute_reply": "2025-04-06T09:11:03.273886Z"
    },
    "papermill": {
     "duration": 0.012205,
     "end_time": "2025-04-06T09:11:03.277074",
     "exception": false,
     "start_time": "2025-04-06T09:11:03.264869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def init_params():\n",
    "    W1 = np.random.rand(10, 784) - 0.5\n",
    "    b1 = np.random.rand(10, 1) - 0.5\n",
    "    W2 = np.random.rand(10, 10) - 0.5\n",
    "    b2 = np.random.rand(10, 1) - 0.5\n",
    "    return W1, b1, W2, b2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f39f05ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-06T09:11:03.287249Z",
     "iopub.status.busy": "2025-04-06T09:11:03.286926Z",
     "iopub.status.idle": "2025-04-06T09:11:03.295650Z",
     "shell.execute_reply": "2025-04-06T09:11:03.294966Z"
    },
    "papermill": {
     "duration": 0.015593,
     "end_time": "2025-04-06T09:11:03.297475",
     "exception": false,
     "start_time": "2025-04-06T09:11:03.281882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def ReLU(Z):\n",
    "    return np.maximum(Z, 0)\n",
    "def softmax(Z):\n",
    "    A = np.exp(Z) / sum(np.exp(Z))\n",
    "    return A\n",
    "    \n",
    "def forward_prop(W1, b1, W2, b2, X):\n",
    "    Z1 = W1.dot(X) + b1\n",
    "    A1 = ReLU(Z1)\n",
    "    Z2 = W2.dot(A1) + b2\n",
    "    A2 = softmax(Z2)\n",
    "    return Z1, A1, Z2, A2\n",
    "\n",
    "\n",
    "def ReLU_deriv(Z):\n",
    "    return Z > 0\n",
    "\n",
    "def one_hot(Y):\n",
    "    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n",
    "    one_hot_Y[np.arange(Y.size), Y] = 1\n",
    "    one_hot_Y = one_hot_Y.T\n",
    "    return one_hot_Y\n",
    "\n",
    "\n",
    "def backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n",
    "    one_hot_Y = one_hot(Y)\n",
    "    dZ2 = A2 - one_hot_Y\n",
    "    dW2 = 1 / m * dZ2.dot(A1.T)\n",
    "    db2 = 1 / m * np.sum(dZ2)\n",
    "    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n",
    "    dW1 = 1 / m * dZ1.dot(X.T)\n",
    "    db1 = 1 / m * np.sum(dZ1)\n",
    "    return dW1, db1, dW2, db2\n",
    "\n",
    "def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n",
    "    W1 = W1 - alpha * dW1\n",
    "    b1 = b1 - alpha * db1    \n",
    "    W2 = W2 - alpha * dW2  \n",
    "    b2 = b2 - alpha * db2    \n",
    "    return W1, b1, W2, b2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "af291cba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-06T09:11:03.305886Z",
     "iopub.status.busy": "2025-04-06T09:11:03.305502Z",
     "iopub.status.idle": "2025-04-06T09:11:03.311607Z",
     "shell.execute_reply": "2025-04-06T09:11:03.310899Z"
    },
    "papermill": {
     "duration": 0.012405,
     "end_time": "2025-04-06T09:11:03.313137",
     "exception": false,
     "start_time": "2025-04-06T09:11:03.300732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_predictions(A2):\n",
    "    return np.argmax(A2, 0)\n",
    "\n",
    "def get_accuracy(predictions, Y):\n",
    "    print(predictions, Y)\n",
    "    return np.sum(predictions == Y) / Y.size\n",
    "\n",
    "def gradient_descent(X, Y, alpha, iterations):\n",
    "    W1, b1, W2, b2 = init_params()\n",
    "    for i in range(iterations):\n",
    "        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n",
    "        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n",
    "        if i % 10 == 0:\n",
    "            print(\"Iteration: \", i)\n",
    "            predictions = get_predictions(A2)\n",
    "            print(get_accuracy(predictions, Y))\n",
    "    return W1, b1, W2, b2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "68e73474",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-06T09:11:03.324142Z",
     "iopub.status.busy": "2025-04-06T09:11:03.323632Z",
     "iopub.status.idle": "2025-04-06T09:11:38.860161Z",
     "shell.execute_reply": "2025-04-06T09:11:38.859221Z"
    },
    "papermill": {
     "duration": 35.54385,
     "end_time": "2025-04-06T09:11:38.862140",
     "exception": false,
     "start_time": "2025-04-06T09:11:03.318290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:  0\n",
      "[4 3 3 ... 4 1 4] [8 3 5 ... 6 6 3]\n",
      "0.11543902439024391\n",
      "Iteration:  10\n",
      "[6 3 0 ... 4 1 7] [8 3 5 ... 6 6 3]\n",
      "0.16721951219512196\n",
      "Iteration:  20\n",
      "[6 3 0 ... 0 0 7] [8 3 5 ... 6 6 3]\n",
      "0.26246341463414635\n",
      "Iteration:  30\n",
      "[6 8 3 ... 0 0 7] [8 3 5 ... 6 6 3]\n",
      "0.31790243902439025\n",
      "Iteration:  40\n",
      "[6 8 3 ... 6 6 7] [8 3 5 ... 6 6 3]\n",
      "0.3644390243902439\n",
      "Iteration:  50\n",
      "[6 8 3 ... 6 6 7] [8 3 5 ... 6 6 3]\n",
      "0.4072195121951219\n",
      "Iteration:  60\n",
      "[8 8 3 ... 6 6 7] [8 3 5 ... 6 6 3]\n",
      "0.4525609756097561\n",
      "Iteration:  70\n",
      "[5 8 3 ... 6 6 7] [8 3 5 ... 6 6 3]\n",
      "0.49429268292682926\n",
      "Iteration:  80\n",
      "[5 8 3 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.528829268292683\n",
      "Iteration:  90\n",
      "[5 3 3 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.5566829268292683\n",
      "Iteration:  100\n",
      "[5 3 3 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.5821463414634146\n",
      "Iteration:  110\n",
      "[5 3 3 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.6038536585365853\n",
      "Iteration:  120\n",
      "[5 3 3 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.622609756097561\n",
      "Iteration:  130\n",
      "[5 3 3 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.6392439024390244\n",
      "Iteration:  140\n",
      "[5 3 3 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.6564390243902439\n",
      "Iteration:  150\n",
      "[8 3 3 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.671\n",
      "Iteration:  160\n",
      "[8 3 5 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.6846829268292683\n",
      "Iteration:  170\n",
      "[8 3 5 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.697780487804878\n",
      "Iteration:  180\n",
      "[8 3 5 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.7103658536585366\n",
      "Iteration:  190\n",
      "[8 3 5 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.7217560975609756\n",
      "Iteration:  200\n",
      "[8 3 5 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.7323170731707317\n",
      "Iteration:  210\n",
      "[8 3 5 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.7421951219512195\n",
      "Iteration:  220\n",
      "[8 3 5 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.7509024390243902\n",
      "Iteration:  230\n",
      "[8 3 5 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.7586585365853659\n",
      "Iteration:  240\n",
      "[8 3 5 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.7657804878048781\n",
      "Iteration:  250\n",
      "[8 3 5 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.7722439024390244\n",
      "Iteration:  260\n",
      "[8 3 9 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.778219512195122\n",
      "Iteration:  270\n",
      "[8 3 9 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.7839268292682927\n",
      "Iteration:  280\n",
      "[8 3 9 ... 6 6 9] [8 3 5 ... 6 6 3]\n",
      "0.7882439024390244\n",
      "Iteration:  290\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.793219512195122\n",
      "Iteration:  300\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.7979024390243903\n",
      "Iteration:  310\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.801609756097561\n",
      "Iteration:  320\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8055121951219513\n",
      "Iteration:  330\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8095365853658537\n",
      "Iteration:  340\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8128292682926829\n",
      "Iteration:  350\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8160731707317073\n",
      "Iteration:  360\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8194146341463414\n",
      "Iteration:  370\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.822390243902439\n",
      "Iteration:  380\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8248292682926829\n",
      "Iteration:  390\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8272926829268292\n",
      "Iteration:  400\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8300731707317073\n",
      "Iteration:  410\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8317317073170731\n",
      "Iteration:  420\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.833780487804878\n",
      "Iteration:  430\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8359268292682926\n",
      "Iteration:  440\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8375609756097561\n",
      "Iteration:  450\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8391219512195122\n",
      "Iteration:  460\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.841\n",
      "Iteration:  470\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8431219512195122\n",
      "Iteration:  480\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8442195121951219\n",
      "Iteration:  490\n",
      "[8 3 9 ... 6 6 3] [8 3 5 ... 6 6 3]\n",
      "0.8454878048780488\n"
     ]
    }
   ],
   "source": [
    "W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "77dfae3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-06T09:11:38.875716Z",
     "iopub.status.busy": "2025-04-06T09:11:38.875381Z",
     "iopub.status.idle": "2025-04-06T09:11:39.112371Z",
     "shell.execute_reply": "2025-04-06T09:11:39.111312Z"
    },
    "papermill": {
     "duration": 0.245755,
     "end_time": "2025-04-06T09:11:39.114075",
     "exception": false,
     "start_time": "2025-04-06T09:11:38.868320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [8]\n",
      "Label:  8\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def make_predictions(X, W1, b1, W2, b2):\n",
    "    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n",
    "    predictions = get_predictions(A2)\n",
    "    return predictions\n",
    "\n",
    "def test_prediction(index, W1, b1, W2, b2):\n",
    "    current_image = X_train[:, index, None]\n",
    "    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n",
    "    label = Y_train[index]\n",
    "    print(\"Prediction: \", prediction)\n",
    "    print(\"Label: \", label)\n",
    "    \n",
    "    current_image = current_image.reshape((28, 28)) * 255\n",
    "    plt.gray()\n",
    "    plt.imshow(current_image, interpolation='nearest')\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "test_prediction(0, W1, b1, W2, b2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1794069",
   "metadata": {
    "papermill": {
     "duration": 0.005662,
     "end_time": "2025-04-06T09:11:39.125911",
     "exception": false,
     "start_time": "2025-04-06T09:11:39.120249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 44.450898,
   "end_time": "2025-04-06T09:11:39.752331",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-06T09:10:55.301433",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
