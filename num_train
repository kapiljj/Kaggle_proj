{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt#showing image","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-06T08:37:04.752207Z","iopub.execute_input":"2025-04-06T08:37:04.752424Z","iopub.status.idle":"2025-04-06T08:37:05.854256Z","shell.execute_reply.started":"2025-04-06T08:37:04.752403Z","shell.execute_reply":"2025-04-06T08:37:05.853147Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"data= pd.read_csv(\"/kaggle/input/digit-recognizer/train.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T08:38:34.444114Z","iopub.execute_input":"2025-04-06T08:38:34.444501Z","iopub.status.idle":"2025-04-06T08:38:38.055195Z","shell.execute_reply.started":"2025-04-06T08:38:34.444475Z","shell.execute_reply":"2025-04-06T08:38:38.054071Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"data = np.array(data)\nm, n = data.shape\nnp.random.shuffle(data) # shuffle before splitting into dev and training sets\n\ndata_dev = data[0:1000].T\nY_dev = data_dev[0]\nX_dev = data_dev[1:n]\nX_dev = X_dev / 255.\n\ndata_train = data[1000:m].T\nY_train = data_train[0]\nX_train = data_train[1:n]\nX_train = X_train / 255.\n_,m_train = X_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T09:00:24.448150Z","iopub.execute_input":"2025-04-06T09:00:24.448564Z","iopub.status.idle":"2025-04-06T09:00:25.495934Z","shell.execute_reply.started":"2025-04-06T09:00:24.448531Z","shell.execute_reply":"2025-04-06T09:00:25.495026Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"Y_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T09:00:33.653288Z","iopub.execute_input":"2025-04-06T09:00:33.653632Z","iopub.status.idle":"2025-04-06T09:00:33.662228Z","shell.execute_reply.started":"2025-04-06T09:00:33.653605Z","shell.execute_reply":"2025-04-06T09:00:33.660966Z"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"array([6, 2, 9, ..., 4, 9, 8])"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"def init_params():\n    W1 = np.random.rand(10, 784) - 0.5\n    b1 = np.random.rand(10, 1) - 0.5\n    W2 = np.random.rand(10, 10) - 0.5\n    b2 = np.random.rand(10, 1) - 0.5\n    return W1, b1, W2, b2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T09:00:49.938124Z","iopub.execute_input":"2025-04-06T09:00:49.938543Z","iopub.status.idle":"2025-04-06T09:00:49.944161Z","shell.execute_reply.started":"2025-04-06T09:00:49.938509Z","shell.execute_reply":"2025-04-06T09:00:49.942749Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"def ReLU(Z):\n    return np.maximum(Z, 0)\ndef softmax(Z):\n    A = np.exp(Z) / sum(np.exp(Z))\n    return A\n    \ndef forward_prop(W1, b1, W2, b2, X):\n    Z1 = W1.dot(X) + b1\n    A1 = ReLU(Z1)\n    Z2 = W2.dot(A1) + b2\n    A2 = softmax(Z2)\n    return Z1, A1, Z2, A2\n\n\ndef ReLU_deriv(Z):\n    return Z > 0\n\ndef one_hot(Y):\n    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n    one_hot_Y[np.arange(Y.size), Y] = 1\n    one_hot_Y = one_hot_Y.T\n    return one_hot_Y\n\n\ndef backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n    one_hot_Y = one_hot(Y)\n    dZ2 = A2 - one_hot_Y\n    dW2 = 1 / m * dZ2.dot(A1.T)\n    db2 = 1 / m * np.sum(dZ2)\n    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n    dW1 = 1 / m * dZ1.dot(X.T)\n    db1 = 1 / m * np.sum(dZ1)\n    return dW1, db1, dW2, db2\n\ndef update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n    W1 = W1 - alpha * dW1\n    b1 = b1 - alpha * db1    \n    W2 = W2 - alpha * dW2  \n    b2 = b2 - alpha * db2    \n    return W1, b1, W2, b2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T09:00:52.523459Z","iopub.execute_input":"2025-04-06T09:00:52.523880Z","iopub.status.idle":"2025-04-06T09:00:52.534410Z","shell.execute_reply.started":"2025-04-06T09:00:52.523848Z","shell.execute_reply":"2025-04-06T09:00:52.532996Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"def get_predictions(A2):\n    return np.argmax(A2, 0)\n\ndef get_accuracy(predictions, Y):\n    print(predictions, Y)\n    return np.sum(predictions == Y) / Y.size\n\ndef gradient_descent(X, Y, alpha, iterations):\n    W1, b1, W2, b2 = init_params()\n    for i in range(iterations):\n        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n        if i % 10 == 0:\n            print(\"Iteration: \", i)\n            predictions = get_predictions(A2)\n            print(get_accuracy(predictions, Y))\n    return W1, b1, W2, b2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T09:00:57.079052Z","iopub.execute_input":"2025-04-06T09:00:57.079479Z","iopub.status.idle":"2025-04-06T09:00:57.087791Z","shell.execute_reply.started":"2025-04-06T09:00:57.079445Z","shell.execute_reply":"2025-04-06T09:00:57.086279Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 500)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T09:03:54.592595Z","iopub.execute_input":"2025-04-06T09:03:54.593032Z","iopub.status.idle":"2025-04-06T09:04:32.674701Z","shell.execute_reply.started":"2025-04-06T09:03:54.593000Z","shell.execute_reply":"2025-04-06T09:04:32.673837Z"}},"outputs":[{"name":"stdout","text":"Iteration:  0\n[1 5 3 ... 2 3 1] [6 2 9 ... 4 9 8]\n0.07351219512195122\nIteration:  10\n[1 3 3 ... 2 2 1] [6 2 9 ... 4 9 8]\n0.22702439024390245\nIteration:  20\n[1 8 3 ... 2 2 1] [6 2 9 ... 4 9 8]\n0.31870731707317074\nIteration:  30\n[1 3 6 ... 2 2 1] [6 2 9 ... 4 9 8]\n0.37953658536585366\nIteration:  40\n[6 3 6 ... 2 9 1] [6 2 9 ... 4 9 8]\n0.43402439024390244\nIteration:  50\n[6 3 4 ... 2 9 1] [6 2 9 ... 4 9 8]\n0.48429268292682925\nIteration:  60\n[6 3 4 ... 6 9 1] [6 2 9 ... 4 9 8]\n0.5305609756097561\nIteration:  70\n[6 2 4 ... 6 9 1] [6 2 9 ... 4 9 8]\n0.5688048780487804\nIteration:  80\n[6 2 4 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.6034146341463414\nIteration:  90\n[6 2 4 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.6324146341463415\nIteration:  100\n[6 2 4 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.6540975609756098\nIteration:  110\n[6 2 4 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.6728048780487805\nIteration:  120\n[6 2 4 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.6873902439024391\nIteration:  130\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7006341463414634\nIteration:  140\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7120975609756097\nIteration:  150\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7215853658536585\nIteration:  160\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7309512195121951\nIteration:  170\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7394634146341463\nIteration:  180\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7466585365853659\nIteration:  190\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7531219512195122\nIteration:  200\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7591951219512195\nIteration:  210\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7648292682926829\nIteration:  220\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7697804878048781\nIteration:  230\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7756829268292683\nIteration:  240\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7811463414634147\nIteration:  250\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7851707317073171\nIteration:  260\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7894634146341464\nIteration:  270\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7934146341463415\nIteration:  280\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.7971707317073171\nIteration:  290\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.8008536585365854\nIteration:  300\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.8044878048780488\nIteration:  310\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.8077073170731708\nIteration:  320\n[6 2 9 ... 6 9 4] [6 2 9 ... 4 9 8]\n0.8105121951219513\nIteration:  330\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.813560975609756\nIteration:  340\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8161951219512195\nIteration:  350\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8184878048780487\nIteration:  360\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8208780487804878\nIteration:  370\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8234634146341463\nIteration:  380\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8264146341463414\nIteration:  390\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8282926829268292\nIteration:  400\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8302926829268292\nIteration:  410\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8325121951219512\nIteration:  420\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8347560975609756\nIteration:  430\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8368780487804878\nIteration:  440\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.838780487804878\nIteration:  450\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.840609756097561\nIteration:  460\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8423170731707317\nIteration:  470\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8443658536585366\nIteration:  480\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8458048780487805\nIteration:  490\n[6 2 9 ... 4 9 4] [6 2 9 ... 4 9 8]\n0.8472926829268292\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"def make_predictions(X, W1, b1, W2, b2):\n    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n    predictions = get_predictions(A2)\n    return predictions\n\ndef test_prediction(index, W1, b1, W2, b2):\n    current_image = X_train[:, index, None]\n    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n    label = Y_train[index]\n    print(\"Prediction: \", prediction)\n    print(\"Label: \", label)\n    \n    current_image = current_image.reshape((28, 28)) * 255\n    plt.gray()\n    plt.imshow(current_image, interpolation='nearest')\n    plt.show()\n\n\ntest_prediction(0, W1, b1, W2, b2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T09:04:39.138444Z","iopub.execute_input":"2025-04-06T09:04:39.138861Z","iopub.status.idle":"2025-04-06T09:04:39.372210Z","shell.execute_reply.started":"2025-04-06T09:04:39.138784Z","shell.execute_reply":"2025-04-06T09:04:39.371234Z"}},"outputs":[{"name":"stdout","text":"Prediction:  [6]\nLabel:  6\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}